// -----------------------------------------------------------------------------
// paramfile.h
// Rawser Spicer
// date created: 2014/04/09
//
//  this is the header for the Paramfile Class
//  the param file class represents a cav Paramater file generated by the
//  site creator program.
//
// -----------------------------------------------------------------------------
#ifndef PARAMFILE_H
#define PARAMFILE_H

#include <QString>
#include <vector>
using std::vector;
#include <map>
using std::map;
#include "csvrow.h"


// type defs
typedef vector<CsvRow> paramSet;

// -----------------------------------------------------------------------------
// Class ParamFile
//      the internal representation of the csv files that can be generarted by
// the site_creator program. The class allows for multiple parameter setes to
// be loaded from data files via the setParamset and getIds Functions.
// -----------------------------------------------------------------------------
class ParamFile
{
public:

    // -------------------------------------------------------------------------
    // default constructor
    //      does nothing
    // -------------------------------------------------------------------------
    ParamFile(){}

    // -------------------------------------------------------------------------
    // name constructor
    //      Allows the output name as well as the input name to be sepcified.
    // preconditions:
    //      none
    // postconditions:
    //      _name & _tag will be set
    //      _type will be Table or Array
    //      _ids will be a list of valid ids
    //      _rows will point to an the last set of data loaded
    //      _paramRow will be all of the parater stes loaded
    // execptions:
    //      throws invalaid argument if input file not found
    // -------------------------------------------------------------------------
    ParamFile(QString myName,QString fName);

    // -------------------------------------------------------------------------
    // setOutName
    //      set name
    // preconditions:
    //      none
    // postconditions:
    //      name is set to the new  value
    // -------------------------------------------------------------------------
    void setOutName(QString name) {_name = name;}

    // -------------------------------------------------------------------------
    // write
    //      writes the current paramSet pointed to by _rows to the file named
    // _name
    // preconditions:
    //      _name should be a csv file it does not  have to exist
    //      _rows must point to data
    // postconditions:
    //      none
    // -------------------------------------------------------------------------
    void write();

    // -------------------------------------------------------------------------
    // getTag
    //      returns the tag
    // preconditions:
    //      none
    // postconditions:
    //      none
    // -------------------------------------------------------------------------
    QString getTag() const {return _tag;}

    // -------------------------------------------------------------------------
    // getType
    //      returns the Type
    // preconditions:
    //      none
    // postconditions:
    //      none
    // -------------------------------------------------------------------------
    QString getType() const {return _type;}


    // -------------------------------------------------------------------------
    // size
    //      returns the size of paramSet pointed to by _rows
    // preconditions:
    //      _rows shoud be set
    // postconditions:
    //      none
    // -------------------------------------------------------------------------
    std::size_t size() const {return _rows->size();}


    // -------------------------------------------------------------------------
    // operarot[]
    //      returns a reference to the value at the index in the array pointed
    // to by _rows
    // preconditions:
    //      index must be in range
    // postconditions:
    //      returns a freference
    // -------------------------------------------------------------------------
    CsvRow& operator[](int idx){ return (*_rows)[idx];}

    // -------------------------------------------------------------------------
    // operarot[] const
    //      returns a reference to the value at the index in the array pointed
    // to by _rows
    // preconditions:
    //      index must be in range
    // postconditions:
    //      returns a freference
    // -------------------------------------------------------------------------
    const CsvRow& operator[] (int idx) const  { return (*this)[idx];}

    // -------------------------------------------------------------------------
    // setParamSet
    //      sets _rows to the given param set
    // preconditions:
    //      for id in paramRows id must me a valid paramSet
    // postconditions:
    //      _rows is set to the given param set if it exists. stayts the same
    // otherwise. returns a bool indicating if it was set or not.
    // -------------------------------------------------------------------------
    bool setParamSet(int id);

    // -------------------------------------------------------------------------
    // getIds
    //      returns the list of Ids
    // preconditions:
    //      none
    // postconditions:
    //      none
    // -------------------------------------------------------------------------
    const vector<int>& getIds() const {return _ids;}


private:

    // -------------------------------------------------------------------------
    // LoadTableFile
    //      loads a table file
    //  helper function for name constructor see pre and post conditions there
    // -------------------------------------------------------------------------
    void load_table_file(QString fName);

    // -------------------------------------------------------------------------
    // LoadArrayFile
    //      loads an array file
    //  helper function for name constructor see pre and post conditions there
    // -------------------------------------------------------------------------
    void load_array_file(QString fName);

    // data members
    QString _name;
    QString _tag;
    QString _type;
    vector<int> _ids;
    paramSet* _rows;
    map<int, paramSet> _paramRows;

}; // end of class ParamFile

#endif // PARAMFILE_H
