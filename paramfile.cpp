// -----------------------------------------------------------------------------
// paramfile.cpp
// Rawser Spicer
// date created: 2014/04/09
//
//  this is the source for the Paramfile Class
//  the param file class represents a cav Paramater file generated by the
//  site creator program.
//
// -----------------------------------------------------------------------------
#include <QFile>
#include <stdexcept>
#include <QStringList>
#include <sstream>
using std::istringstream;
#include "strmap.h"
#include "paramfile.h"



// -------------------------------------------------------------------------
// name constructor
//      Allows the output name as well as the input name to be sepcified.
// preconditions:
//      none
// postconditions:
//      _name & _tag will be set
//      _type will be Table or Array
//      _ids will be a list of valid ids
//      _rows will point to an the last set of data loaded
//      _paramRow will be all of the parater stes loaded
// execptions:
//      throws invalaid argument if input file not found
// -------------------------------------------------------------------------
ParamFile::ParamFile(QString myName, QString fName):_name(myName)
{
    if (!fName.endsWith(".dat"))
        throw  std::invalid_argument("input file is not a .dat file");


    QFile inFile(fName);
    if (!inFile.open(QIODevice::ReadOnly))
        throw std::invalid_argument("input file dose not exist");
    char   str[1024];
    inFile.readLine(str, 1024);
    inFile.close();

    if( str[0] == '"') {

        load_table_file(fName);
        _type = "Table";
    }
    else {
        load_array_file(fName);
        _type = "Array";
    }


}// end name constructor



// -------------------------------------------------------------------------
// write
//      writes the current paramSet pointed to by _rows to the file named
// _name
// preconditions:
//      _name should be a csv file it does not  have to exist
//      _rows must point to data
// postconditions:
//      none
// -------------------------------------------------------------------------
void ParamFile::write()
{
    QFile writeFile(_name);
    writeFile.open(QIODevice::WriteOnly);
    writeFile.write("d_element,Data_Type,Input_Array_Pos,Coef_1,Coef_2,Coef_3,"
                    "Coef_4,Coef_5,Coef_6,Coef_7,Qc_Param_High,Qc_Param_Low,"
                    "QC_Param_Step,Output_Header_Name,Ouput_Header_Units,"
                    "Output_Header_Measurement_Type\n");
    for (auto &i : (*_rows))
    {
        writeFile.write(i.to_str().toStdString().c_str());
        writeFile.write("\n");
    }
    writeFile.close();
} // end write



// -------------------------------------------------------------------------
// setParamSet
//      sets _rows to the given param set
// preconditions:
//      for id in paramRows id must me a valid paramSet
// postconditions:
//      _rows is set to the given param set if it exists. stayts the same
// otherwise. returns a bool indicating if it was set or not.
// -------------------------------------------------------------------------
bool ParamFile::setParamSet(int id)
{
    bool found = false;
    for (auto i: _ids)
        if (i == id) {
            found = true;
            _rows = &_paramRows[id];
            _tag = std::to_string(id).c_str();
            break;
        }
    return found;
}// end setParamSet



// -------------------------------------------------------------------------
// LoadTableFile
//      loads a table file
//  helper function for name constructor see pre and post conditions there
// -------------------------------------------------------------------------
void ParamFile::load_table_file(QString fName)
{
    _rows = &_paramRows[-9999];


    QFile unitFile("unit_maps.txt");
    unitFile.open(QIODevice::ReadOnly);
    QString unitStr(unitFile.readAll());
    istringstream iss(unitStr.toStdString());
    StrMap unitMap(iss);
    unitFile.close();

    QFile dataFile(fName);
    dataFile.open(QIODevice::ReadOnly);
    char str[1024];
    dataFile.readLine(str, 1024);
    QString line(str);
    int idx = line.lastIndexOf(",") + 1;
    const char * c = (line.toStdString().data() + idx );

    _tag = c;
    _tag = _tag.toLower();
    _tag = _tag.remove('"');
    _tag = _tag.remove('\n');
    for(auto i = 0 ; i < _tag.size(); ++i)
    {
        if (! _tag[i].isLetter())
            _tag.remove(i,1);
    }

    dataFile.readLine(str, 1024);
    line = str;
    QStringList list_names = line.split(',');

    // -78  / 178

    dataFile.readLine(str, 1024);
    line = str;


    QStringList list_units = line.split(',');
    dataFile.readLine(str, 1024);
    line = str;
    QStringList list_mtype = line.split(',');
    dataFile.readLine(str, 1024);
    line = str;
    QStringList list_firstVal = line.split(',');
    int index = 0;
    auto units = list_units.begin();
    auto mType = list_mtype.begin();
    auto firstVal = list_firstVal.begin();
    for (auto names = list_names.begin(); names != list_names.end(); ++names)
    {
        bool b;
        QString unitStr;
        firstVal->remove('"').toFloat(&b);
        try{
            unitStr = units->remove('"');
            unitStr = unitStr.remove("\r\n");
            unitStr = unitStr.remove('\n');
            unitStr = unitMap.at(unitStr.toStdString()).c_str();
        }catch (...){
            unitStr = units->remove('"');
            unitStr = unitStr.remove("\r\n").remove('\n');
        }
        QString typeStr = mType->remove('"').remove("\r\n").remove('\n');
        bool l = (typeStr.length() > 0);
        CsvRow row(names->remove('"').remove("\r\n").remove('\n'),
                   (b?"num":"ignore"), index, unitStr, (l?typeStr:"ingore"));
        _rows->push_back(row);
        index++;
        ++units;
        ++mType;
        ++firstVal;
    }
    dataFile.close();
} // end load_table_File



// -------------------------------------------------------------------------
// LoadArrayFile
//      loads an array file
//  helper function for name constructor see pre and post conditions there
// -------------------------------------------------------------------------
void ParamFile::load_array_file(QString fName)
{
    QFile dataFile(fName);
    dataFile.open(QIODevice::ReadOnly);
    QString fstring(dataFile.readAll());
    istringstream iss(fstring.toStdString());
    dataFile.close();

    while(true){

        std::string temp;
        std::getline(iss,temp);
        if (temp.size() < 1) break;
        QString line(temp.c_str());
       // vector<float> rowVec;
        QStringList list = line.split(',');

        bool seen = false;
        for(auto i : _ids)
        {
            if(i == list[0].toInt()){
                seen = true;
                break;
            }
        }
        if (seen) continue;

        /*for (auto i : list)
        {
            rowVec.push_back(i.toFloat());
        }*/

        _ids.push_back(list[0].toInt());
        setParamSet(list[0].toInt());

        for(int i = 1; i < list.size();++i)
        {
            std::string name = std::to_string(list[0].toInt()) + ": "
                                                + std::to_string(i);
            CsvRow row(name.c_str(), "num" ,i-1);
            _rows->push_back(row);
        }
    }
}// end loadArrayFile


